unit cCadCongregacao;

interface

uses System.Classes, Vcl.Controls,
  Vcl.ExtCtrls, Vcl.Dialogs, FireDAC.Comp.Client, System.SysUtils;
// LISTA DE UNITS

type
  TCongregacao = class
  private
    // VARIAVEIS PRIVADA SOMENTE DENTRO DA CLASSE
    ConexaoDB: TFDConnection;
    F_cod_congregacao: Integer;
    F_cod_central: string;
    F_congregacao: string;
    F_setor: string;
    F_polo: string;
    F_situacao: string;
    F_telefone: string;
    F_cnpj: string;
    F_siteblog: string;
    F_endereco: string;
    F_complemento: string;
    F_bairro: string;
    F_cep: string;
    F_cidade: string;
    F_diasculto: string;
    F_diacoa: string;
    F_diacom: string;
    F_diacoi: string;
    F_diacv: string;
    F_data_aber_sub: TDateTime;
    F_data_aber_cong: TDateTime;
    F_data_fun_coa: TDateTime;
    F_data_fun_com: TDateTime;
    F_data_fun_coi: TDateTime;
    F_data_fun_cv: TDateTime;
    F_data_cadastro: TDateTime;
    F_usuario_cadastro: string;
    F_cong_principal: string;
    F_dirigente: string;
    F_cod_setor: string;
    F_cod_igreja: string;
    F_cod_cc: string;
    F_sigla: string;

  public
    constructor Create(aConexao: TFDConnection); // CONSTRUTOR DA CLASSE
    destructor Destroy; override; // DESTROI A CLASSE USAR OVERRIDE POR CAUSA
    function Inserir: Boolean;
    function Atualizar: Boolean;
    function Apagar: Boolean;
    function Selecionar(id: Integer): Boolean;

  published
    // VARIAVEIS PUBLICAS UTILAIZADAS PARA PROPRIEDADES DA CLASSE
    // PARA FORNECER INFORMAÇÕESD EM RUMTIME
property    cod_congregacao: Integer read    F_cod_congregacao write    F_cod_congregacao;
property    cod_central: string read    F_cod_central write    F_cod_central;
property    congregacao: string read    F_congregacao write    F_congregacao;
property    setor: string read    F_setor write    F_setor;
property    polo: string read    F_polo write    F_polo;
property    situacao: string read    F_situacao write    F_situacao;
property    telefone: string read    F_telefone write    F_telefone;
property    cnpj: string read    F_cnpj write    F_cnpj;
property    siteblog: string read    F_siteblog write    F_siteblog;
property    endereco: string read    F_endereco write    F_endereco;
property    complemento: string read    F_complemento write    F_complemento;
property    bairro: string read    F_bairro write    F_bairro;
property    cep: string read    F_cep write    F_cep;
property    cidade: string read    F_cidade write    F_cidade;
property    diasculto: string read    F_diasculto write    F_diasculto;
property    diacoa: string read    F_diacoa write    F_diacoa;
property    diacom: string read    F_diacom write    F_diacom;
property    diacoi: string read    F_diacoi write    F_diacoi;
property    diacv: string read    F_diacv write    F_diacv;
property    data_aber_sub: TDateTime read    F_data_aber_sub write    F_data_aber_sub;
property    data_aber_cong: TDateTime read    F_data_aber_cong write    F_data_aber_cong;
property    data_fun_coa: TDateTime read    F_data_fun_coa write    F_data_fun_coa;
property    data_fun_com: TDateTime read    F_data_fun_com write    F_data_fun_com;
property    data_fun_coi: TDateTime read    F_data_fun_coi write    F_data_fun_coi;
property    data_fun_cv: TDateTime read    F_data_fun_cv write    F_data_fun_cv;
property    data_cadastro: TDateTime read    F_data_cadastro write    F_data_cadastro;
property    usuario_cadastro: string read    F_usuario_cadastro write    F_usuario_cadastro;
property    cong_principal: string read    F_cong_principal write    F_cong_principal;
property    dirigente: string read    F_dirigente write    F_dirigente;
property    cod_setor: string read    F_cod_setor write    F_cod_setor;
property    cod_igreja: string read    F_cod_igreja write    F_cod_igreja;
property    cod_cc: string read    F_cod_cc write    F_cod_cc;
property    sigla: string read    F_sigla write    F_sigla;
  end;

implementation

{$REGION 'Constructor and Destructor'}

constructor TCongregacao.Create;
begin
  ConexaoDB := aConexao;
end;

destructor TCongregacao.Destroy;
begin

  inherited;
end;
{$ENDREGION}
{$REGION 'CRUD'}

function TCongregacao.Apagar: Boolean;
var
  Qry: TFDQuery;
begin
  if MessageDlg('Apagar o Registro: ' + #13 + #13 + 'Código: ' +
    IntToStr(F_cod_congregacao) + #13 + 'Descrição: ' + F_congregacao,
    mtConfirmation, [mbYes, mbNo], 0) = mrNO then
  begin
    Result := false;
    Abort;
  end;

  Try
    Result := True;
    Qry := TFDQuery.Create(nil);
    Qry.Connection := ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add
      ('DELETE FROM igreja.tb_congregacao WHERE cod_congregacao=:cod_congregacao ');
    Qry.ParamByName('cod_congregacao').AsInteger := F_cod_congregacao;
    try
      Qry.ExecSQL;
    except
      Result := false;
    end;

  Finally
    if Assigned(Qry) then
      FreeAndNil(Qry)
  End;

end;

function TCongregacao.Atualizar: Boolean;
var
  Qry: TFDQuery;
begin
  try
    Result := True;
    Qry := TFDQuery.Create(nil);
    Qry.Connection := ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('UPDATE tb_departamento ' +
      ' SET nome_departamento=:nome_departamento WHERE cod_departamento=cod_departamento');
    Qry.ParamByName('cod_departamento').AsInteger := F_cod_congregacao;
    Qry.ParamByName('nome_departamento').AsString := F_congregacao;
    try
      Qry.SQL.Text;
      Qry.ExecSQL;
    except
      Result := false;
    end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry)
  end;
end;

function TCongregacao.Inserir: Boolean;
var
  Qry: TFDQuery;
begin
  try
    Result := True;
    Qry := TFDQuery.Create(nil);
    Qry.Connection := ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('INSERT INTO tb_departamento ' +
      '(nome_departamento) VALUES(:nome_departamento) ');
    Qry.ParamByName('nome_departamento').AsString := Self.F_congregacao;

    try
      Qry.SQL.Text;
      Qry.ExecSQL;
    except
      Result := false;
    end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry)
  end;
end;

function TCongregacao.Selecionar(id: Integer): Boolean;
var
  Qry: TFDQuery;
begin
  try
    Result := True;
    Qry := TFDQuery.Create(nil);
    Qry.Connection := ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add
      ('SELECT cod_congregacao, cod_central, congregacao, setor, polo, situacao, '
      + 'telefone, cnpj, siteblog, endereco, complemento, bairro, cep, cidade, diasculto, '
      + ' diacoa, diacom, diacoi, diacv, data_aber_sub, data_aber_cong, data_fun_coa, '
      + ' data_fun_com, data_fun_coi, data_fun_cv, data_cadastro, usuario_cadastro, '
      + ' cong_principal, dirigente, cod_setor, cod_igreja, cod_cc, sigla ' +
      'FROM igreja.tb_congregacao WHERE cod_congregacao=:cod_congregacao ');
    Qry.ParamByName('cod_congregacao').AsInteger := id;

    try
      Qry.Open;
      Self.F_cod_congregacao := Qry.FieldByName('cod_departamento').AsInteger;
      Self.F_congregacao := Qry.FieldByName('nome_departamento').AsString;
    Except
      Result := false;
    end;

  finally
    if Assigned(Qry) then
      FreeAndNil(Qry)
  end;
end;
{$ENDREGION}

end.
